Python

🔶2018.5.10

list方法
list.append(x)
在列表的末尾追加一个元素
list.extend(L)
在列表的末尾追加一组元素
list.insert(i,x)
在第i个元素之前插入元素x
list.remove(x)
删除列表中第一个x元素
list.pop(i)
移除给定位置i的元素，并返回剩余的值，如果给定位置为空则移除最后一个元素并返回
list.clear()
移除列表中的所有元素
list.index(x)
返回列表中第一个元素为x的元素
list.count(x)
统计列表中x的数量
list.sort()
对列表按从小到大排序
list.reverse()
对列表进行翻转，首尾对掉
list.copy()
对列表进行复制

🔶2018.5.12

VScode中配置pylint报错提示
在设置中添加如下设置
{
    "python.linting.pylintEnabled": true,
    "python.linting.pylintPath": "/usr/bin/pylint",
}
查看pylint路径命令
dpkg -L pylint


🔶2018.5.16

git 使用
git init
初始化仓储
git status
状态查看
git add
追踪文件            
git diff
比较两次修改的差异
git commit -m "提交说明"      
提交代码并填写本次提交说明
vi id_rsa.pub			
在id_rsa.pub中添加key
git clone git@github.com:murongziying/python.git
克隆仓储
git remote add origin git@github.com:murongziying/python.git
添加远程仓储
git remote -v
查看所有已经连接的远程代码库
git push origin master
提交到远程代码库

🔶2018.5.17

liuchao@liuchao-ThinkPad-T420:~/develop/python$ ./sort.py 
./sort.py: 行 1: words: 未找到命令
./sort.py: 行 3: 未预期的符号 `print' 附近有语法错误
./sort.py: 行 3: `    print(w,  len(w))'

是因为python文件开头没有指定命令解释器。
在开头追加python命令解释器即可
#! /usr/bin/python3

🔶2018.5.19


1.创建数据库d的SQL语句是（ create database d）。

2.删除数据库d的SQL语句是（drop database  d）。

3.删除表t的SQL语句是（drop table t）。

4.删除视图v的SQL语句是（drop view v）。

5.向表中增加约束，或是更改表结构，需要用到（  alter table ）命令。

6.已知学生表存储学号，姓名，年龄信息，表结构如下：student（sid，sname，age），age为整型，其余字段为字符型。则向学生表中添加学号为1001，姓名为李华，年龄为20的记录，应该执行的SQL语句是

（    insert into student values(‘1001’,’李华’,20)        ）。

7.已知员工表存储工号，姓名，出生日期信息，表结构如下：employee（eid, ename, birthdate）,birthdate为datetime数据类型，其余字段为字符型。则向员工表中添加工号为2002，姓名为王刚，出生日期为1990年10月12日的记录，应该执行的SQL语句是

（ insert into employee values(‘2002’,’王刚’, ‘1990-10-12’) ）。

8.已知图书表存储图书编号，图书名，作者信息，表结构如下：book（bid，bname，author），三个字段均为字符型。则向图书表中添加编号为b059，书名为数据结构，作者为张雷的记录，应该执行的SQL语句是

（ insert into book values(‘b059’, ‘数据结构’,’张雷’) ）。

9.已知成绩表存储学号，课程号和成绩信息，表结构如下：sc（sid，cid，score），score字段为整型，其余字段为字符型。则向成绩表中添加1001号学生选修c005号课程，成绩为80分的记录，应该执行的SQL语句是

（   insert into sc values(‘1001’, ‘c005’,80)            ）。

10.已知课程表存储课程号，课程名，学分信息，表结构如下：course（cid，cname，credit），credit字段为整型，允许为空；其余字段为字符型。则向课程表中添加编号为c001，名称为数据库，学分待定的一门课程记录，应该执行的SQL语句是

（ insert into course(cid,cname)  values(‘c001’,’数据库’)）。

11.已知成绩表存储学号，课程号和成绩信息，表结构如下：sc（sid，cid，score），score字段为整型，其余字段为字符型。则从成绩表中删除1001号学生的所有选修记录，应该执行的SQL语句是

（ delete fromsc  where sid=’1001’        ）。

12.已知课程表存储课程号，课程名，学分信息，表结构如下：course（cid，cname，credit），credit字段为整型，其余字段为字符型。则从课程表中删除学分大于6的所有课程记录，应该执行的SQL语句是

（  delete from course where credit>6   ）。

13.已知图书表存储图书编号，图书名，作者信息，表结构如下：book（bid，bname，author），三个字段均为字符型。则从图书表中删除书名中包括数据库关键词的所有图书的记录，应该执行的SQL语句是

（ delete frombook where bname like ‘%数据库%’       ）。

14.已知员工表存储工号，姓名，出生日期信息，表结构如下：employee（eid, ename, birthdate）,birthdate为datetime数据类型，其余字段为字符型。则从员工表中删除工号为1001的员工的记录，应该执行的SQL语句是

（  delete from employee where eid=’1001’            ）。

15.已知借阅表存储用户名，图书编号和借阅时间信息，表结构如下：ub（uid，bid，borrowdate），borrowdate字段为日期型，其余字段为字符型。则从借阅表中删除早于1980年1月1日的借阅记录，应该执行的SQL语句是

（ delete from ub where borrowdate<’1980-1-1’）。

16.已知成绩表存储学号，课程号和成绩信息，表结构如下：sc（sid，cid，score），score字段为整型，其余字段为字符型。则将1001号学生选修c005课程的成绩增加百分之五，应该执行的SQL语句是

（    update sc set  score=score*1.05  where sid=’1001’ and cid=’c005’    ）。

17.已知课程表存储课程号，课程名，学分信息，表结构如下：course（cid，cname，credit），credit字段为整型，其余字段为字符型。则将数据结构课程的学分修改为4，应该执行的SQL语句是

（ update course set credit=4where cname=’数据结构’ ）。

18.已知图书表存储图书编号，图书名，作者信息，表结构如下：book（bid，bname，author），三个字段均为字符型。则将图书编号为b049的图书的作者修改为张雷，应该执行的SQL语句是

（ update book set author=’张雷’ where bid=’b049’ ）。

19.已知员工表存储工号，姓名，出生日期信息，表结构如下：employee（eid, ename, birthdate）,birthdate为datetime数据类型，其余字段为字符型。则将1001号员工的出生日期修改为1995年10月20日，应该执行的SQL语句是（update employee set birthdate=’1995-10-20’ where eid=’1001’   ）。

20.已知学生表存储学号，姓名，年龄信息，表结构如下：student（sid，sname，age），age为整型，其余字段为字符型。则将所有学生的年龄增长一岁，应该执行的SQL语句是

（    update student set age=age+1        ）。


1. 已知网上图书销售系统数据库中包括三张表：

客户信息表customer（cid，cname，email，tel，address），存放客户账号、姓名、电子邮箱、电话以及地址；  （所有字段均为字符型）

图书信息表book（bid，bname，author，press，price，ISBN），存放图书编号、书名、作者、出版社、价格和ISBN号；  （价格字段为整型，其他字段均为字符型）

图书购买记录表cb（cid，bid，shoppingdate，quantity），存放客户账号、图书编号、购买日期、数量。  （购买日期为日期型，数量为整型，其他字段均为字符型）


（1）利用SQL查询价格在50元到100元（含50、100元）之间的图书的书名、作者与价格；

       select bname, author, price

from book

where pricebetween 50 and 100

（2） 利用SQL查询购买了编号为“b001”的图书的客户的账号和购买日期，按购买日期由先到后排序

select cid,shoppingdate

from cb

where bid=’b001’

order byshoppingdate

（3）利用SQL查询所有地址中含有“杨浦”关键字的客户的姓名、电话和地址

select cname,tel, address

from customer

where addresslike ‘%杨浦%’

（4） 利用SQL查询“高等教育出版社”出版的图书的平均价格

        select avg(price)

        from book 

        where press=’高等教育出版社’

（5）利用SQL查询查询账号为“user01”的客户购买的图书总数

        select sum(quantity)

        from cb

        wherecid='user01'

（6）创建一个用于查询各出版社出版的图书的平均价格的视图（视图名称自行定义）

create viewmyview

as

select press,avg(price)

from book

group by press

 （7） 利用SQL查询购买在2015年1月1日购买过图书的客户的姓名以及书名

select cname, bname

from customer,book,cb

wherebook.bid=cb.bid and customer.cid=cb.cid and shoppingdate=’2015-1-1’

 （8）利用SQL查询一次购买了超过50本《数据库应用技术》图书的客户的姓名

select cname

from customer,book, cb

wherecustomer.cid=cb.cid and book.bid=cb.bid

and bname=’数据库应用技术’ and quantity>50

 

 （9）利用SQL查询没有购买过清华大学出版社出版的图书的客户姓名和电话

       select cname, tel

       from customer

       where cid not in ( select cid

                   from cb, book

                  wherecb.bid=book.bid  and  press='清华大学出版社')



🔶2018.5.20
连接数据库
mysql -h 127.0.0.1 -u root -p
enter passwd:

创建数据库
create database test;

查看数据库
show databases;

选择数据库
use test;

创建表
myslq> create table student(
	-> student_id INT NOT AUTO_INCREMENT,
	-> student_name VARCHAR(100) NOT NULL,
	-> student_age INT(10) NOT NULL,
	-> submssion_data DATE,
	-> PRIMARY KEY ( student_id )
	-> )ENGINE=InnoDB DEFAULT CHARSET=utf8;

查看表
show tables;

查看数据表属性
desc student; == show columns from student;

插入数据
myslq> insert into student
	-> (student_name,student_age,submission_data)
	-> values
	-> ("liuchao", "25", NOW());

读取数据表数据
select * from student;

显示索引信息
show index from student;

显示数据库中所有表信息
show table status from test;

显示表名以student开头的信息
show table status from test like 'student';

显示表名以student开头的信息按列打印
show table status from test like 'student'\G;

🔶2018.5.26
计算算术平方根：

import cmath
# 方法一
num = float(input("please tall me you want number:"))
num_sqrt = num ** 0.5
print("the number {0:0.5f} square root is: {1:0.5f} ".format(num, num_sqrt))
当格式化字符{0:0.5f}中存在小数点后精确数值要求时，如果输入负数如[-4]会产生以下错误：
please tall me you want number:-4
Traceback (most recent call last):
  File "./squareroot.py", line 9, in <module>
    print("the number {0:0.5f} square root is: {1:0.5f} ".format(num, num_sqrt))
ValueError: Zero padding is not allowed in complex format specifier
# 方法二
a = float(input('please input number a:'))
b = a ** 0.5
print("a aquare root is: %f"%b)
只用此方法无法计算负数的平方根，因为无法将a ** 0.5转化为float类型
please input number a:-4
Traceback (most recent call last):
  File "./squareroot.py", line 13, in <module>
    print("a aquare root is: %f"%b)
TypeError: can't convert complex to float

# 方法三
num = int(input("please input a number:"))
num_sqrt = cmath.sqrt(num)
print(" {0} 的平方根是 {1:0.3f}+{2:0.3f}j".format(num, num_sqrt.real,num_sqrt.imag))

🔶2018.6.10

